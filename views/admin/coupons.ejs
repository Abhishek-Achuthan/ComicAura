<%- include('partials/header') %>

<div class="container-fluid">
    <div class="row">
        <%- include('partials/sidebar') %>

        <main class="col-md-9 m-auto col-lg-10 px-md-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">Coupon Management</h1>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCouponModal">
                    Add New Coupon
                </button>
            </div>

            <!-- Coupons Table -->
            <div class="table-responsive">
                <table class="table table-striped table-sm">
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Discount</th>
                            <th>Min. Purchase</th>
                            <th>Max. Discount</th>
                            <th>Usage</th>
                            <th>Valid Until</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% coupons.forEach(coupon => { %>
                            <tr>
                                <td><%= coupon.code %></td>
                                <td>
                                    <%= coupon.discountType === 'percentage' ? coupon.discountAmount + '%' : '₹' + coupon.discountAmount %>
                                </td>
                                <td>₹<%= coupon.minimumPurchase %></td>
                                <td>₹<%= coupon.maxDiscountAmount %></td>
                                <td><%= coupon.usedCount %>/<%= coupon.usageLimit %></td>
                                <td>
                                    <% const endDate = new Date(coupon.endDate);
                                    const now = new Date();
                                    const isExpired = endDate < now;
                                    %>
                                    <span class="<%= isExpired ? 'text-danger' : 'text-success' %>">
                                        <%= endDate.toLocaleDateString() %>
                                    </span>
                                </td>
                                <td>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input toggle-status" type="checkbox"
                                            data-coupon-id="<%= coupon._id %>"
                                            <%= coupon.isActive ? 'checked' : '' %>>
                                    </div>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-info edit-coupon" 
                                            data-coupon="<%= JSON.stringify(coupon) %>"
                                            data-bs-toggle="modal" 
                                            data-bs-target="#editCouponModal">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger delete-coupon"
                                            data-coupon-id="<%= coupon._id %>">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>

            <!-- Add Coupon Modal -->
            <div class="modal fade" id="addCouponModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Create New Coupon</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <form id="addCouponForm" class="row g-3">
                                <!-- Coupon Code -->
                                <div class="col-md-6">
                                    <label class="form-label">Coupon Code</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" name="code" required pattern="[A-Z0-9]{6,12}" placeholder="e.g., SUMMER2024">
                                        <button type="button" class="btn btn-secondary" id="generateCode">
                                            Generate
                                        </button>
                                    </div>
                                    <small class="text-muted">6-12 characters, uppercase only</small>
                                </div>

                                <!-- Discount Type and Amount in one row -->
                                <div class="col-md-6">
                                    <label class="form-label">Discount</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" name="discountAmount" required min="0" step="0.01" placeholder="Amount">
                                        <select class="form-select" name="discountType" style="max-width: 120px;">
                                            <option value="percentage">%</option>
                                            <option value="fixed">₹</option>
                                        </select>
                                    </div>
                                    <small class="text-muted discount-hint">For percentage: 0-100, For fixed: any amount</small>
                                </div>

                                <!-- Purchase Requirements -->
                                <div class="col-md-6">
                                    <label class="form-label">Min. Purchase Amount</label>
                                    <div class="input-group">
                                        <span class="input-group-text">₹</span>
                                        <input type="number" class="form-control" name="minimumPurchase" required min="0" step="0.01" placeholder="e.g., 1000">
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label">Max. Discount Amount</label>
                                    <div class="input-group">
                                        <span class="input-group-text">₹</span>
                                        <input type="number" class="form-control" name="maxDiscountAmount" required min="0" step="0.01" placeholder="e.g., 500">
                                    </div>
                                </div>

                                <!-- Validity Period -->
                                <div class="col-md-6">
                                    <label class="form-label">Valid From</label>
                                    <input type="date" class="form-control" name="startDate" required>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label">Valid Until</label>
                                    <input type="date" class="form-control" name="endDate" required>
                                </div>

                                <!-- Usage Limit -->
                                <div class="col-md-6">
                                    <label class="form-label">Usage Limit</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" name="usageLimit" required min="1" value="10" placeholder="Number of times this coupon can be used">
                                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">Preset</button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="#" data-value="10">10 uses</a></li>
                                            <li><a class="dropdown-item" href="#" data-value="50">50 uses</a></li>
                                            <li><a class="dropdown-item" href="#" data-value="100">100 uses</a></li>
                                            <li><a class="dropdown-item" href="#" data-value="500">500 uses</a></li>
                                            <li><a class="dropdown-item" href="#" data-value="1000">1000 uses</a></li>
                                        </ul>
                                    </div>
                                </div>

                                <!-- Description with character counter -->
                                <div class="col-12">
                                    <label class="form-label">Description (Optional)</label>
                                    <textarea class="form-control" name="description" rows="2" 
                                            maxlength="100" placeholder="Brief description of the coupon offer"></textarea>
                                    <small class="text-muted character-count">100 characters remaining</small>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" id="saveCoupon">Create Coupon</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Coupon Modal -->
            <div class="modal fade" id="editCouponModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Edit Coupon</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editCouponForm">
                                <input type="hidden" name="couponId">
                                <div class="mb-3">
                                    <label class="form-label">Coupon Code</label>
                                    <input type="text" class="form-control" name="code" readonly>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Discount Type</label>
                                    <select class="form-select" name="discountType" required>
                                        <option value="percentage">Percentage</option>
                                        <option value="fixed">Fixed Amount</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Discount Amount</label>
                                    <input type="number" class="form-control" name="discountAmount" required min="0">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Minimum Purchase Amount</label>
                                    <input type="number" class="form-control" name="minimumPurchase" required min="0">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Maximum Discount Amount</label>
                                    <input type="number" class="form-control" name="maxDiscountAmount" required min="0">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Start Date</label>
                                    <input type="date" class="form-control" name="startDate" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">End Date</label>
                                    <input type="date" class="form-control" name="endDate" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Usage Limit</label>
                                    <input type="number" class="form-control" name="usageLimit" required min="1">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" name="description" rows="3"></textarea>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" id="updateCoupon">Update Coupon</button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</div>

<style>
    .modal-content {
        background-color: #212529;
        color: #fff;
    }

    .modal-header {
        border-bottom: 1px solid #373b3e;
    }

    .modal-footer {
        border-top: 1px solid #373b3e;
    }

    .btn-close {
        filter: invert(1) grayscale(100%) brightness(200%);
    }

    .form-control, .form-select {
        background-color: #2c3034;
        border-color: #373b3e;
        color: #fff;
    }

    .form-control:focus, .form-select:focus {
        background-color: #2c3034;
        border-color: #0d6efd;
        color: #fff;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .form-control::placeholder {
        color: #6c757d;
    }

    .form-select option {
        background-color: #212529;
        color: #fff;
    }

    .text-muted {
        color: #adb5bd !important;
    }

    .modal-title {
        color: #fff;
    }

    .form-label {
        color: #fff;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize date inputs with today's date
    const today = new Date().toISOString().split('T')[0];
    const nextMonth = new Date();
    nextMonth.setMonth(nextMonth.getMonth() + 1);
    
    document.querySelectorAll('input[type="date"]').forEach(input => {
        input.min = today;
        if (input.name === 'startDate') {
            input.value = today;
        } else if (input.name === 'endDate') {
            input.value = nextMonth.toISOString().split('T')[0];
        }
    });

    // Character counter for description
    const descriptionTextarea = document.querySelector('textarea[name="description"]');
    const characterCount = document.querySelector('.character-count');
    
    descriptionTextarea.addEventListener('input', function() {
        const remaining = 100 - this.value.length;
        characterCount.textContent = `${remaining} characters remaining`;
    });

    // Update max discount validation based on minimum purchase
    const minPurchaseInput = document.querySelector('input[name="minimumPurchase"]');
    const maxDiscountInput = document.querySelector('input[name="maxDiscountAmount"]');
    
    minPurchaseInput.addEventListener('input', function() {
        maxDiscountInput.max = this.value;
    });

    // Handle discount type and amount validation
    const discountTypeSelect = document.querySelector('select[name="discountType"]');
    const discountAmountInput = document.querySelector('input[name="discountAmount"]');
    const discountHint = document.querySelector('.discount-hint');
    
    function updateDiscountValidation() {
        const isPercentage = discountTypeSelect.value === 'percentage';
        
        if (isPercentage) {
            discountAmountInput.max = "100";
            discountAmountInput.step = "0.01";
            discountAmountInput.placeholder = "e.g., 20";
            discountHint.textContent = "Enter a value between 0 and 100";
            
            // If current value is over 100, reset it
            if (parseFloat(discountAmountInput.value) > 100) {
                discountAmountInput.value = "";
            }
        } else {
            discountAmountInput.max = "";
            discountAmountInput.step = "0.01";
            discountAmountInput.placeholder = "e.g., 500";
            discountHint.textContent = "Enter the fixed discount amount";
        }
    }

    discountTypeSelect.addEventListener('change', updateDiscountValidation);
    updateDiscountValidation(); // Initialize on load

    // Handle usage limit presets
    document.querySelectorAll('.dropdown-item').forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            document.querySelector('input[name="usageLimit"]').value = this.dataset.value;
        });
    });

    // Form submission handler
    document.getElementById('saveCoupon').addEventListener('click', async function() {
        const form = document.getElementById('addCouponForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        // Convert amounts to numbers
        data.discountAmount = parseFloat(data.discountAmount);
        data.minimumPurchase = parseFloat(data.minimumPurchase);
        data.maxDiscountAmount = parseFloat(data.maxDiscountAmount);
        data.usageLimit = parseInt(data.usageLimit);

        try {
            const response = await fetch('/admin/coupons', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();
            if (result.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Coupon created successfully',
                    icon: 'success'
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: result.message,
                    icon: 'error'
                });
            }
        } catch (error) {
            console.error('Error creating coupon:', error);
            Swal.fire({
                title: 'Error!',
                text: 'Failed to create coupon',
                icon: 'error'
            });
        }
    });

    // Generate coupon code
    document.getElementById('generateCode').addEventListener('click', async function() {
        try {
            const response = await fetch('/admin/coupons/generate-code');
            const data = await response.json();
            if (data.success) {
                document.querySelector('#addCouponForm input[name="code"]').value = data.code;
            }
        } catch (error) {
            console.error('Error generating code:', error);
            Swal.fire({
                title: 'Error!',
                text: 'Failed to generate coupon code',
                icon: 'error'
            });
        }
    });

    // Edit coupon
    document.querySelectorAll('.edit-coupon').forEach(button => {
        button.addEventListener('click', function() {
            const coupon = JSON.parse(this.dataset.coupon);
            const form = document.getElementById('editCouponForm');
            
            form.querySelector('input[name="couponId"]').value = coupon._id;
            form.querySelector('input[name="code"]').value = coupon.code;
            form.querySelector('select[name="discountType"]').value = coupon.discountType;
            form.querySelector('input[name="discountAmount"]').value = coupon.discountAmount;
            form.querySelector('input[name="minimumPurchase"]').value = coupon.minimumPurchase;
            form.querySelector('input[name="maxDiscountAmount"]').value = coupon.maxDiscountAmount;
            form.querySelector('input[name="startDate"]').value = new Date(coupon.startDate).toISOString().split('T')[0];
            form.querySelector('input[name="endDate"]').value = new Date(coupon.endDate).toISOString().split('T')[0];
            form.querySelector('input[name="usageLimit"]').value = coupon.usageLimit;
            form.querySelector('textarea[name="description"]').value = coupon.description;
        });
    });

    // Update coupon
    document.getElementById('updateCoupon').addEventListener('click', async function() {
        const form = document.getElementById('editCouponForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        const couponId = data.couponId;
        delete data.couponId;

        try {
            const response = await fetch(`/admin/coupons/${couponId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();
            if (result.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Coupon updated successfully',
                    icon: 'success'
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: result.message,
                    icon: 'error'
                });
            }
        } catch (error) {
            console.error('Error updating coupon:', error);
            Swal.fire({
                title: 'Error!',
                text: 'Failed to update coupon',
                icon: 'error'
            });
        }
    });

    // Toggle coupon status
    document.querySelectorAll('.toggle-status').forEach(toggle => {
        toggle.addEventListener('change', async function() {
            const couponId = this.dataset.couponId;

            try {
                const response = await fetch(`/admin/coupons/${couponId}/toggle`, {
                    method: 'POST'
                });

                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: `Coupon ${result.isActive ? 'activated' : 'deactivated'} successfully`,
                        icon: 'success'
                    });
                } else {
                    this.checked = !this.checked;
                    Swal.fire({
                        title: 'Error!',
                        text: result.message,
                        icon: 'error'
                    });
                }
            } catch (error) {
                console.error('Error toggling coupon status:', error);
                this.checked = !this.checked;
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to toggle coupon status',
                    icon: 'error'
                });
            }
        });
    });

    // Delete coupon
    document.querySelectorAll('.delete-coupon').forEach(button => {
        button.addEventListener('click', async function() {
            const couponId = this.getAttribute('data-coupon-id');
            
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: "This coupon will be permanently deleted!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!',
                background: '#212529',
                color: '#fff'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/coupons/${couponId}`, {
                        method: 'DELETE'
                    });
                    const data = await response.json();

                    if (data.success) {
                        Swal.fire({
                            title: 'Deleted!',
                            text: 'Coupon has been deleted successfully.',
                            icon: 'success',
                            background: '#212529',
                            color: '#fff'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message || 'Failed to delete coupon',
                            icon: 'error',
                            background: '#212529',
                            color: '#fff'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Something went wrong while deleting the coupon',
                        icon: 'error',
                        background: '#212529',
                        color: '#fff'
                    });
                }
            }
        });
    });

    // Helper function to show alerts
    function showAlert(message, type) {
        Swal.fire({
            title: type === 'success' ? 'Success!' : 'Error!',
            text: message,
            icon: type,
            confirmButtonText: 'OK'
        });
    }
});
</script>

<%- include('partials/footer') %>

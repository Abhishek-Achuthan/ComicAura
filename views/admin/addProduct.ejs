<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ComicAura Admin - Add Product</title>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <link href="/css/admin/addProduct.css" rel="stylesheet">

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
</head>
<body>

    <main class="content-main">
        <div class="content-header">
            <div>
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8 mx-auto">
                        <form id="addProductForm" class="needs-validation" enctype="multipart/form-data" novalidate>
                            <div class="mb-4">
                                <label for="name" class="form-label">Product Name</label>
                                <input type="text" class="form-control" id="name" name="name" required>
                                <div class="invalid-feedback">Please enter a product name.</div>
                            </div>

                            <div class="mb-4">
                                <label for="category" class="form-label">Category</label>
                                <select class="form-control" id="category" name="category" required>
                                    <option value="">Select Category</option>
                                    <% if (categories && categories.length>0) { %>
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category._id %>"><%= category.name %></option>
                                    <% }); %>
                                  <% } %>
                                </select>
                                <div class="invalid-feedback">Please select a category.</div>
                            </div>

                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <label for="regularPrice" class="form-label">Regular Price</label>
                                    <div class="input-group">
                                        <span class="input-group-text">₹</span>
                                        <input type="number" class="form-control" id="regularPrice" name="regularPrice" 
                                               min="0" step="0.01" required onchange="validatePrices()">
                                        <div class="invalid-feedback">Please enter a valid regular price.</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label for="salePrice" class="form-label">Sale Price</label>
                                    <div class="input-group">
                                        <span class="input-group-text">₹</span>
                                        <input type="number" class="form-control" id="salePrice" name="salePrice" 
                                               min="0" step="0.01" required onchange="validatePrices()">
                                        <div class="invalid-feedback">Sale price must be less than regular price.</div>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label for="stock" class="form-label">Stock</label>
                                <input type="number" class="form-control" id="stock" name="stock" min="0" required>
                                <div class="invalid-feedback">Please enter valid stock quantity.</div>
                            </div>

                            <div class="mb-4">
                                <label for="description" class="form-label">Description</label>
                                <textarea class="form-control" id="description" name="description" rows="4"></textarea>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Product Images</label>
                                <div class="input-group">
                                    <input class="form-control" type="file" id="images" name="images" accept="image/*" multiple required>
                                    <button type="button" class="btn btn-primary" id="addMoreImages">
                                        <i class="fas fa-plus"></i> Add More Images
                                    </button>
                                </div>
                                <small class="text-muted">You can select multiple images at once or add more images later. Images will be cropped to a square format.</small>
                                <div id="imagePreview" class="mt-3 d-flex flex-wrap gap-3"></div>
                            </div>

                            <div class="mb-4">
                                <label for="tags" class="form-label">Tags (Optional)</label>
                                <input type="text" class="form-control" id="tags" name="tags" 
                                       placeholder="Enter tags separated by commas">
                                <small class="text-muted">Example: action, adventure, fantasy</small>
                            </div>

                            <div class="mb-4">
                                <label for="status" class="form-label">Status</label>
                                <select class="form-control" id="status" name="status" required>
                                    <option value="In Stock">In Stock</option>
                                    <option value="Out of Stock">Out of Stock</option>
                                    <option value="Pre-order">Pre-order</option>
                                </select>
                                <div class="invalid-feedback">Please select a status.</div>
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-plus-circle me-2"></i>Add Product
                                </button>
                                <a href="/admin/product" class="btn btn-secondary">
                                    <i class="fas fa-arrow-left me-2"></i>Back to Products
                                </a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </main>
<div class="crop-modal" id="cropModal">
    <div class="crop-modal-content">
        <div class="crop-container">
            <img id="cropImage" src="">
        </div>
        <div class="crop-controls">
            <button class="btn btn-primary" id="cropButton">
                <i class="fas fa-crop"></i> Crop Image
            </button>
            <button class="btn btn-secondary" id="cancelCropButton">
                <i class="fas fa-times"></i> Cancel
            </button>
        </div>
    </div>
</div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('addProductForm');
            const inputs = form.querySelectorAll('input, select, textarea');
            const maxFileSize = 5 * 1024 * 1024; // 5MB
            
            // Validate file input
            document.getElementById('images').addEventListener('change', function(e) {
                const files = Array.from(e.target.files);
                let isValid = true;
                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
                
                files.forEach(file => {
                    if (!allowedTypes.includes(file.type)) {
                        isValid = false;
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid File Type',
                            text: 'Please upload only image files (JPEG, PNG, GIF, WEBP)'
                        });
                        e.target.value = '';
                        return;
                    }
                    
                    if (file.size > maxFileSize) {
                        isValid = false;
                        Swal.fire({
                            icon: 'error',
                            title: 'File Too Large',
                            text: 'Each image must be less than 5MB'
                        });
                        e.target.value = '';
                        return;
                    }
                });
                
                if (isValid) {
                    updateImagePreview();
                }
            });

            // Price validation function
            window.validatePrices = function() {
                const regularPrice = parseFloat(document.getElementById('regularPrice').value);
                const salePrice = parseFloat(document.getElementById('salePrice').value);
                const salePriceInput = document.getElementById('salePrice');
                
                if (salePrice >= regularPrice) {
                    salePriceInput.setCustomValidity('Sale price must be less than regular price');
                    salePriceInput.classList.add('is-invalid');
                } else {
                    salePriceInput.setCustomValidity('');
                    salePriceInput.classList.remove('is-invalid');
                }
            };
            
            // Form validation
            form.addEventListener('submit', function(event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                
                const regularPrice = parseFloat(document.getElementById('regularPrice').value);
                const salePrice = parseFloat(document.getElementById('salePrice').value);
                
                if (salePrice >= regularPrice) {
                    event.preventDefault();
                    event.stopPropagation();
                    document.getElementById('salePrice').classList.add('is-invalid');
                }
                
                form.classList.add('was-validated');
            });

            const imageInput = document.getElementById('images');
            const addMoreImagesBtn = document.getElementById('addMoreImages');
            const imagePreview = document.getElementById('imagePreview');
            const cropModal = document.getElementById('cropModal');
            const cropImage = document.getElementById('cropImage');
            let cropper = null;
            let selectedFiles = [];
            let currentFileIndex = 0;
            let currentFiles = [];

            imageInput.addEventListener('change', function(e) {
                e.preventDefault();
                const files = Array.from(e.target.files);
                if (files.length > 0) {
                    currentFileIndex = 0;
                    currentFiles = files;
                    startCropping();
                }
            });

            addMoreImagesBtn.addEventListener('click', function(e) {
                e.preventDefault();
                imageInput.click();
            });

            // Start cropping process for files
            function startCropping() {
                if (currentFileIndex < currentFiles.length) {
                    const file = currentFiles[currentFileIndex];
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        cropImage.src = e.target.result;
                        cropModal.style.display = 'block';
                        
                        if (cropper) {
                            cropper.destroy();
                        }
                        
                        cropper = new Cropper(cropImage, {
                            aspectRatio: 1,
                            viewMode: 2,
                            dragMode: 'move',
                            background: false,
                            cropBoxMovable: true,
                            cropBoxResizable: true,
                            toggleDragModeOnDblclick: false,
                            autoCropArea: 1
                        });
                    };
                    
                    reader.readAsDataURL(file);
                }
            }

            document.getElementById('cropButton').addEventListener('click', function() {
                if (cropper) {
                    cropper.getCroppedCanvas({
                        width: 800,
                        height: 800,
                        imageSmoothingEnabled: true,
                        imageSmoothingQuality: 'high'
                    }).toBlob((blob) => {
                        const croppedFile = new File([blob], `cropped_image_${Date.now()}.jpg`, {
                            type: 'image/jpeg',
                            lastModified: new Date().getTime()
                        });
                        selectedFiles.push(croppedFile);
                        
                        currentFileIndex++;
                        cropModal.style.display = 'none';
                        
                        updateImagePreview();
                        
                        if (currentFileIndex < currentFiles.length) {
                            startCropping();
                        }
                    }, 'image/jpeg', 0.9);
                }
            });

            document.getElementById('cancelCropButton').addEventListener('click', function() {
                cropModal.style.display = 'none';
                currentFileIndex++;
                
                if (currentFileIndex < currentFiles.length) {
                    startCropping();
                }
            });

            function updateImagePreview() {
                imagePreview.innerHTML = '';
                selectedFiles.forEach((file, index) => {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const previewContainer = document.createElement('div');
                        previewContainer.className = 'preview-container';
                        
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        
                        const removeBtn = document.createElement('button');
                        removeBtn.className = 'remove-image';
                        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
                        removeBtn.onclick = function() {
                            selectedFiles.splice(index, 1);
                            updateImagePreview();
                            updateFormFiles();
                        };
                        
                        previewContainer.appendChild(img);
                        previewContainer.appendChild(removeBtn);
                        imagePreview.appendChild(previewContainer);
                    };
                    reader.readAsDataURL(file);
                });
            }

            function updateFormFiles() {
                const dataTransfer = new DataTransfer();
                selectedFiles.forEach(file => {
                    dataTransfer.items.add(file);
                });
                imageInput.files = dataTransfer.files;
            }

            if (form) {
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    let isValid = true;
                    
                    inputs.forEach(input => {
                        if (input.hasAttribute('required') && !input.value) {
                            input.classList.add('is-invalid');
                            isValid = false;
                        }
                    });

                    if (selectedFiles.length < 3) {
                        imageInput.classList.add('is-invalid');
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Please add at least three product image',
                            confirmButtonColor: '#FF6B00'
                        });
                        isValid = false;
                    }

                    if (!isValid) {
                        return;
                    }

                    const formData = new FormData(this);
                    
                    // Clear any existing images and add the selected files
                    for (let i = formData.getAll('images').length - 1; i >= 0; i--) {
                        formData.delete('images');
                    }
                    selectedFiles.forEach(file => {
                        formData.append('images', file);
                    });
                    
                    // Handle tags
                    const tagsString = formData.get('tags');
                    if (tagsString) {
                        const tagsArray = tagsString.split(',').map(tag => tag.trim()).filter(tag => tag);
                        formData.set('tags', JSON.stringify(tagsArray));
                    }

                    try {
                        const response = await fetch('/admin/addProduct', {
                            method: 'POST',
                            body: formData
                        });

                        const data = await response.json();

                        if (response.ok) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Product added successfully',
                                confirmButtonColor: '#FF6B00'
                            }).then(() => {
                                window.location.href = '/admin/product';
                            });
                        } else {
                            throw new Error(data.message || 'Failed to add product');
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: error.message || 'Something went wrong',
                            confirmButtonColor: '#FF6B00'
                        });
                    }
                });
            }
        });
    </script>
</body>
</html>

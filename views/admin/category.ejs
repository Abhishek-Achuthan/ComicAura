<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ComicAura Admin - Category Management</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
    <link rel="stylesheet" href="/css/admin/category.css">
</head>
<body>
    <!-- Sidebar -->
    <%- include('./partials/sidebar') %>

    <!-- Main Content -->
    <div class="main-content">
        <div class="content-header">
            <div>
                <h2 class="content-title">Categories Management</h2>
            </div>
        </div>

        <div class="search-container">
            <form action="/admin/category/" method="get">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search categories" name="search"/>
                    <button class="btn" type="submit">
                        <i class="fas fa-search"></i> Search
                    </button>
                </div>
            </form>
        </div>

        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <form method="post" action="/admin/addCategory" id="addCategoryForm">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Name</label>
                                <input type="text" name="name" placeholder="Enter category name" class="form-control" id="categorieName" required/>
                                <div id="name-error" class="error-message"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Description</label>
                                <textarea placeholder="Enter category description" name="description" class="form-control" id="descriptionId" rows="4" required></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="d-grid">
                                <button class="btn btn-primary" type="submit">
                                    <i class="fas fa-plus"></i> Create Category
                                </button>
                            </div>
                        </form>
                    </div>
                    <div class="col-md-8 ml-10">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Status</th>
                                        <th>List/Unlist</th>
                                        <th>Edit</th>
                                        <th>Offer</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% if(categories && categories.length>0) { %>
                                    <% categories.forEach(category => { %>
                                    <tr data-category-id="<%= category._id %>">
                                        <td></td>
                                        <td><%= category.name %></td>
                                        <td><%= category.description || 'N/A' %></td>
                                        <td>
                                            <span class="badge rounded-pill alert-<%= category.isActive ? 'success' : 'danger' %>">
                                                <%= category.isActive ? 'Listed' : 'Unlisted' %>
                                            </span>
                                        </td>
                                        <td>
                                            <% if(category.isActive) { %>
                                            <button class="btn btn-danger mb-2" onclick="toggleCategory('<%= category._id %>', false)">
                                                <i class="fas fa-ban"></i> Unlist
                                            </button>
                                            <% } else { %>
                                            <button class="btn btn-success" onclick="toggleCategory('<%= category._id %>', true)">
                                                <i class="fas fa-check"></i> List
                                            </button>
                                            <% } %>
                                        </td>
                                        <td>
                                            <a href="/admin/editCategory/<%= category._id %>" class="btn btn-primary">
                                                <i class="fas fa-edit"></i> Edit
                                            </a>
                                        </td>
                                        <td class="offer-cell">
                                            <div class="offer-container">
                                                <% if (category.offer && category.offer.isActive) { %>
                                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteCategoryOffer('<%= category._id %>')">
                                                        <i class="fas fa-tag"></i> Remove Offer
                                                    </button>
                                                <% } else { %>
                                                    <button class="btn btn-sm btn-outline-primary" onclick="openOfferModal('<%= category._id %>', '<%= category.name %>')">
                                                        <i class="fas fa-tag"></i> Add Offer
                                                    </button>
                                                <% } %>
                                            </div>
                                        </td>
                                    </tr>
                                    <% }); %>
                                    <% } else { %>
                                        <tr>
                                            <td colspan="7" class="text-center py-5">
                                                <div class="text-muted">
                                                    <i class="fas fa-users fa-3x mb-3"></i>
                                                    <p>No Categories Found</p>
                                                </div>
                                            </td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Category Offer Modal -->
    <div class="modal fade" id="categoryOfferModal" tabindex="-1" aria-labelledby="categoryOfferModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-dark" id="categoryOfferModalLabel">Add Category Offer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="categoryOfferForm">
                        <input type="hidden" id="category" name="category">
                        <div class="mb-3">
                            <label class="form-label">Category Name</label>
                            <input type="text" class="form-control" id="categoryName" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="discountPercentage" class="form-label">Discount Percentage</label>
                            <div class="input-group">
                                <input type="number" class="form-control" id="discountPercentage" 
                                       name="discountPercentage" min="0" max="100" required>
                                <span class="input-group-text">%</span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="startDate" class="form-label">Start Date</label>
                            <input type="datetime-local" class="form-control" id="startDate" 
                                   name="startDate" required>
                        </div>
                        <div class="mb-3">
                            <label for="endDate" class="form-label">End Date</label>
                            <input type="datetime-local" class="form-control" id="endDate" 
                                   name="endDate" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="saveCategoryOffer()">Save Offer</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script>
        // Initialize modal
        const categoryOfferModal = new bootstrap.Modal(document.getElementById('categoryOfferModal'));

        function openOfferModal(categoryId, categoryName) {
            document.getElementById('category').value = categoryId;
            document.getElementById('categoryName').value = categoryName;
            
            // Set minimum date as today for start date
            const now = new Date();
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            
            startDateInput.min = now.toISOString().slice(0, 16);
            startDateInput.value = now.toISOString().slice(0, 16);
            
            endDateInput.min = now.toISOString().slice(0, 16);
            endDateInput.value = tomorrow.toISOString().slice(0, 16);
            
            categoryOfferModal.show();
        }

        function saveCategoryOffer() {
            const form = document.getElementById('categoryOfferForm');
            const formData = new FormData(form);
            const data = {};
            formData.forEach((value, key) => data[key] = value);

            fetch('/admin/offers/category', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Category offer has been created successfully.',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        categoryOfferModal.hide();
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: result.message || 'Failed to create category offer'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while creating the offer'
                });
            });
        }

        // Validate discount percentage
        document.getElementById('discountPercentage').addEventListener('input', function() {
            const value = parseInt(this.value);
            if (value < 0) this.value = 0;
            if (value > 100) this.value = 100;
        });

        // Validate end date is after start date
        document.getElementById('startDate').addEventListener('change', function() {
            const endDateInput = document.getElementById('endDate');
            endDateInput.min = this.value;
            if (endDateInput.value < this.value) {
                endDateInput.value = this.value;
            }
        });

        document.getElementById('addCategoryForm').addEventListener('submit', async(e) => {
            e.preventDefault();
            
            const name = document.getElementById('categorieName').value.trim();
            const description = document.getElementById('descriptionId').value.trim();

            if (!name || !description) {
                Swal.fire('Error', 'Please fill in all fields', 'error');
                return;
            }

            try {
                const response = await fetch('/admin/addCategory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name, description })
                });

                const result = await response.json();

                if (result.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: result.message,
                        showConfirmButton: false,
                        timer: 1500
                    });


                    const tbody = document.querySelector('table tbody');
                    const newRow = `
                        <tr data-category-id="${result.category._id}">
                            <td></td>
                            <td>${result.category.name}</td>
                            <td>${result.category.description || 'N/A'}</td>
                            <td>
                                <span class="badge rounded-pill alert-success">
                                    Listed
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-danger mb-2" onclick="toggleCategory('${result.category._id}', false)">
                                    <i class="fas fa-ban"></i> Unlist
                                </button>
                            </td>
                            <td>
                                <a href="/admin/editCategory/${result.category._id}" class="btn btn-primary">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" onclick="openOfferModal('${result.category._id}', '${result.category.name}')">
                                    <i class="fas fa-tag"></i> Add Offer
                                </button>
                            </td>
                        </tr>
                    `;
                    tbody.insertAdjacentHTML('beforeend', newRow);
                    document.getElementById('addCategoryForm').reset();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: result.message || 'Failed to add category'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Something went wrong while adding the category'
                });
            }
        });
        
        async function toggleCategory(categoryId, isList) {
            try {
                const response = await fetch(`/admin/category/${categoryId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ isActive: isList })
                });

                const result = await response.json();

                if (result.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: result.message,
                        showConfirmButton: false,
                        timer: 1500
                    });

                  
                    const row = document.querySelector(`tr[data-category-id="${categoryId}"]`);
                    const statusBadge = row.querySelector('.badge');
                    const toggleButton = row.querySelector('.btn-danger, .btn-success');

                    statusBadge.className = `badge rounded-pill alert-${isList ? 'success' : 'danger'}`;
                    statusBadge.textContent = isList ? 'Listed' : 'Unlisted';

                    // Update toggle button
                    if (isList) {
                        toggleButton.className = 'btn btn-danger mb-2';
                        toggleButton.innerHTML = '<i class="fas fa-ban"></i> Unlist';
                        toggleButton.onclick = () => toggleCategory(categoryId, false);
                    } else {
                        toggleButton.className = 'btn btn-success';
                        toggleButton.innerHTML = '<i class="fas fa-check"></i> List';
                        toggleButton.onclick = () => toggleCategory(categoryId, true);
                    }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: result.message || 'Failed to update category status'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Something went wrong while updating the category'
                });
            }
        }
        
        async function deleteCategoryOffer(categoryId) {
            try {
                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "You want to remove this category offer?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, remove it!'
                });

                if (result.isConfirmed) {
                    const response = await fetch(`/admin/offers/category/${categoryId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Refresh the page to show updated state
                        window.location.reload();
                    } else {
                        throw new Error(data.message || 'Failed to remove category offer');
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: error.message || 'Failed to remove category offer'
                });
            }
        }
        
        document.addEventListener('DOMContentLoaded', function() {

            const rows = document.querySelectorAll('tbody tr');
            rows.forEach((row, index) => {
                row.style.setProperty('--row-index', index);
            });

            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    document.querySelector(this.getAttribute('href')).scrollIntoView({
                        behavior: 'smooth'
                    });
                });
            });

            document.querySelectorAll('.btn').forEach(button => {
                button.removeEventListener('click', addRippleEffect);
            });

            document.querySelectorAll('.btn').forEach(button => {
                button.addEventListener('click', addRippleEffect);
            });
        });

        function addRippleEffect(e) {
            this.querySelectorAll('.ripple').forEach(ripple => ripple.remove());
            
            const ripple = document.createElement('div');
            ripple.classList.add('ripple');
            this.appendChild(ripple);
            
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            
            ripple.style.width = ripple.style.height = size + 'px';
            ripple.style.left = e.clientX - rect.left - size/2 + 'px';
            ripple.style.top = e.clientY - rect.top - size/2 + 'px';
            
            ripple.addEventListener('animationend', () => {
                ripple.remove();
            });
        }
        
    </script>
</body>
</html>
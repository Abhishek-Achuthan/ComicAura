<%- include('../partials/header') %>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
<link rel="stylesheet" href="/css/user/shop.css">

<header class="shop-page-header">
    <div class="container">
        <h1 class="shop-page-title text-center mb-4">Comic Shop</h1>
        <div class="shop-search-container">
            <input type="text" id="searchInput" class="shop-search-input" placeholder="Search for mangas anime figurines...">
            <button id="searchBtn" class="shop-search-btn">
                <i class="fas fa-search"></i>
            </button>
        </div>
    </div>
</header>

<div class="shop-wrapper">
    <div class="container">
        <div class="shop-container">
            <aside class="filter-panel">
                <div class="filter-section">
                    <h3 class="filter-title">Sort By</h3>
                    <select id="sortSelect" class="filter-select">
                        <option value="price-low">Price: Low to High</option>
                        <option value="price-high">Price: High to Low</option>
                        <option value="rating">Average Rating</option>
                        <option value="newest">New Arrivals</option>
                        <option value="name-asc">Name: A to Z</option>
                        <option value="name-desc">Name: Z to A</option>
                    </select>
                </div>

                <div class="filter-section">
                    <h3 class="filter-title">Categories</h3>
                    <select id="categorySelect" class="filter-select">
                        <option value="all">All Categories</option>
                        <% categories.forEach(category => { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                        <% }); %>
                    </select>
                </div>

                <div class="filter-section">
                    <h3 class="filter-title">Rating</h3>
                    <select id="ratingSelect" class="filter-select">
                        <option value="all">All Ratings</option>
                        <option value="5">5 Stars</option>
                        <option value="4">4+ Stars</option>
                        <option value="3">3+ Stars</option>
                        <option value="2">2+ Stars</option>
                        <option value="1">1+ Star</option>
                    </select>
                </div>

                <div class="filter-section">
                    <h3 class="filter-title">Price Range</h3>
                    <div class="price-range">
                        <input type="number" id="minPrice" class="form-control" placeholder="Min" min="0">
                        <span class="price-separator">to</span>
                        <input type="number" id="maxPrice" class="form-control" placeholder="Max" min="0">
                    </div>
                    <div id="priceError" class="text-danger mt-2" style="display: none;"></div>
                    <button id="applyPriceFilter" class="btn btn-primary btn-sm mt-2 w-100">Apply</button>
                </div>
            </aside>

            <div class="main-content">
                <div class="products-container">
                    <div id="activeFilters"></div>
                    <div class="products-grid" id="productsGrid">
                    </div>

                    <div id="shopPagination" class="pagination-container"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/js/user/pagination.js"></script>
<script src="/js/user/cart.js"></script>
<script src="/js/user/wishlist.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');
        const sortSelect = document.getElementById('sortSelect');
        const categorySelect = document.getElementById('categorySelect');
        const ratingSelect = document.getElementById('ratingSelect');
        const minPriceInput = document.getElementById('minPrice');
        const maxPriceInput = document.getElementById('maxPrice');
        const applyPriceFilterBtn = document.getElementById('applyPriceFilter');
        const productsGrid = document.getElementById('productsGrid');
        
        // Store current filter state
        let currentFilters = {
            search: '',
            category: 'all',
            sort: 'newest',
            rating: 'all',
            minPrice: '',
            maxPrice: '',
            page: 1
        };

        // Initialize filters from URL parameters
        function initializeFiltersFromURL() {
            const urlParams = new URLSearchParams(window.location.search);
            
            currentFilters = {
                search: urlParams.get('search') || '',
                category: urlParams.get('category') || 'all',
                sort: urlParams.get('sort') || 'newest',
                rating: urlParams.get('rating') || 'all',
                minPrice: urlParams.get('minPrice') || '',
                maxPrice: urlParams.get('maxPrice') || '',
                page: parseInt(urlParams.get('page')) || 1
            };

            // Update UI elements with current filters
            searchInput.value = currentFilters.search;
            sortSelect.value = currentFilters.sort;
            categorySelect.value = currentFilters.category;
            ratingSelect.value = currentFilters.rating;
            minPriceInput.value = currentFilters.minPrice;
            maxPriceInput.value = currentFilters.maxPrice;
        }

        // Initialize filters on page load
        initializeFiltersFromURL();

        // Update URL with current filters
        function updateURL() {
            const params = new URLSearchParams();
            
            Object.entries(currentFilters).forEach(([key, value]) => {
                if (value && value !== 'all' && value !== '') {
                    params.set(key, value);
                }
            });

            const newURL = `${window.location.pathname}${params.toString() ? '?' + params.toString() : ''}`;
            window.history.pushState({}, '', newURL);
        }

        // Validate price range
        function validatePriceRange() {
            const minPrice = parseFloat(minPriceInput.value);
            const maxPrice = parseFloat(maxPriceInput.value);
            const priceError = document.getElementById('priceError');
            
            if (minPrice && maxPrice && minPrice > maxPrice) {
                priceError.textContent = 'Minimum price cannot be greater than maximum price';
                priceError.style.display = 'block';
                return false;
            }
            
            if (minPrice < 0 || maxPrice < 0) {
                priceError.textContent = 'Price cannot be negative';
                priceError.style.display = 'block';
                return false;
            }
            
            priceError.style.display = 'none';
            return true;
        }

        // Apply filters without search
        function applyFiltersWithoutSearch() {
            if (!validatePriceRange()) {
                return;
            }

            currentFilters = {
                ...currentFilters,
                category: categorySelect.value,
                sort: sortSelect.value,
                rating: ratingSelect.value,
                minPrice: minPriceInput.value,
                maxPrice: maxPriceInput.value,
                page: 1
            };

            fetchProducts();
        }

        // Apply search with current filters
        function applySearch() {
            if (!validatePriceRange()) {
                return;
            }

            currentFilters = {
                ...currentFilters,
                search: searchInput.value.trim(),
                page: 1
            };

            fetchProducts();
        }

        // Fetch products with current filters
        async function fetchProducts(page = 1) {
            try {
                currentFilters.page = page;
                updateURL();

                const queryParams = new URLSearchParams();
                Object.entries(currentFilters).forEach(([key, value]) => {
                    if (value && value !== 'all' && value !== '') {
                        queryParams.set(key, value);
                    }
                });

                const response = await fetch(`/shop/filter?${queryParams.toString()}`);
                const data = await response.json();

                if (data.success) {
                    updateProductsGrid(data.products);
                    updatePagination(data.currentPage, data.totalPages);
                    updateActiveFilters();
                } else {
                    showError('Failed to load products');
                }
            } catch (error) {
                console.error('Error fetching products:', error);
                showError('Failed to load products');
            }
        }

        // Show active filters
        function updateActiveFilters() {
            const activeFiltersContainer = document.getElementById('activeFilters');
            let activeFiltersHTML = '';

            if (currentFilters.category !== 'all') {
                const categoryText = categorySelect.options[categorySelect.selectedIndex].text;
                activeFiltersHTML += `<span class="active-filter">Category: ${categoryText}</span>`;
            }
            if (currentFilters.rating !== 'all') {
                activeFiltersHTML += `<span class="active-filter">Rating: ${currentFilters.rating}+ Stars</span>`;
            }
            if (currentFilters.minPrice) {
                activeFiltersHTML += `<span class="active-filter">Min Price: ₹${currentFilters.minPrice}</span>`;
            }
            if (currentFilters.maxPrice) {
                activeFiltersHTML += `<span class="active-filter">Max Price: ₹${currentFilters.maxPrice}</span>`;
            }
            if (currentFilters.search) {
                activeFiltersHTML += `<span class="active-filter">Search: "${currentFilters.search}"</span>`;
            }

            if (activeFiltersHTML) {
                activeFiltersHTML = `<div class="active-filters-title">Active Filters:</div>` + activeFiltersHTML;
            }
            
            activeFiltersContainer.innerHTML = activeFiltersHTML;
        }

        // Event Listeners for search
        searchBtn.addEventListener('click', applySearch);
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                applySearch();
            }
        });

        // Event Listeners for other filters (immediate application)
        categorySelect.addEventListener('change', applyFiltersWithoutSearch);
        ratingSelect.addEventListener('change', applyFiltersWithoutSearch);
        sortSelect.addEventListener('change', applyFiltersWithoutSearch);

        // Price filter button
        applyPriceFilterBtn.addEventListener('click', applyFiltersWithoutSearch);

        // Update products grid
        function updateProductsGrid(products) {
            productsGrid.innerHTML = products.length ? products.map(product => `
                <div class="product-card animate__animated animate__fadeIn">
                    <div class="product-actions">
                        <button class="wishlist-btn ${product.inWishlist ? 'in-wishlist' : ''}"
                            onclick="toggleWishlist('${product._id}', this)"
                            data-product-id="${product._id}">
                            <i class="fas fa-heart"></i>
                        </button>
                    </div>
                    <a href="/product/${product._id}" class="product-link">
                        <div class="product-image">
                            <img src="${product.images && product.images[0] ? product.images[0] : '/images/placeholder.jpg'}" alt="${product.name}">
                        </div>
                        <div class="product-details">
                            <h3 class="product-title">${product.name}</h3>
                            <div class="product-rating">
                                <div class="rating-stars">
                                    ${Array(5).fill(0).map((_, i) => `
                                        <i class="fas fa-star ${i < (product.averageRating || 0) ? 'filled' : ''}"></i>
                                    `).join('')}
                                </div>
                                <span class="rating-count">(${product.ratings ? product.ratings.length : 0})</span>
                            </div>
                            <div class="product-price">₹${product.price.toFixed(2)}</div>
                        </div>
                    </a>
                    ${product.inCart ? `
                        <button 
                            class="add-to-cart-btn in-cart" 
                            onclick="window.location.href='/cart'"
                        >
                            <i class="fas fa-shopping-cart"></i> Go to Cart
                        </button>
                    ` : `
                        <button 
                            class="add-to-cart-btn" 
                            onclick="addToCart('${product._id}', this)"
                            data-product-id="${product._id}"
                        >
                            <i class="fas fa-cart-plus"></i> Add to Cart
                        </button>
                    `}
                </div>
            `).join('') : `
                <div class="no-products">
                    <h3>No products found</h3>
                    <p>Try adjusting your filters or search criteria</p>
                </div>
            `;
        }

        // Initialize pagination
        function updatePagination(currentPage, totalPages) {
            const paginationContainer = document.getElementById('shopPagination');
            
            if (totalPages <= 1) {
                paginationContainer.innerHTML = '';
                return;
            }

            let paginationHTML = `
                <button class="pagination-btn" 
                    ${currentPage === 1 ? 'disabled' : ''} 
                    onclick="fetchProducts(${currentPage - 1})">
                    Previous
                </button>
            `;

            for (let i = 1; i <= totalPages; i++) {
                if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
                    paginationHTML += `
                        <button class="pagination-btn ${i === currentPage ? 'active' : ''}" 
                            onclick="fetchProducts(${i})">
                            ${i}
                        </button>
                    `;
                } else if (i === currentPage - 3 || i === currentPage + 3) {
                    paginationHTML += `<span class="pagination-ellipsis">...</span>`;
                }
            }

            paginationHTML += `
                <button class="pagination-btn" 
                    ${currentPage === totalPages ? 'disabled' : ''} 
                    onclick="fetchProducts(${currentPage + 1})">
                    Next
                </button>
            `;

            paginationContainer.innerHTML = paginationHTML;
        }

        // Error handling
        function showError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'alert alert-danger';
            errorDiv.textContent = message;
            productsGrid.parentElement.insertBefore(errorDiv, productsGrid);
            setTimeout(() => errorDiv.remove(), 3000);
        }

        // Initialize the page
        fetchProducts(currentFilters.page);
    });
</script>

<%- include('../partials/footer') %>
